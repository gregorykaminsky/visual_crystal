All keyboard commands are processed in file 'opengl_keypress.cpp'. In order for the program to process those commands, MyGLWidget window must be selected.This can be accomplished by clicking out it with a mouse. It is the window were openGL image is running.

KEYBOARD COMMANDS:
 
if (current_key == "w")
All the Unit_Cells are moved in the z direction by 0.1 

current_key == "q"
All the Unit_Cells are moved in the z direction by -0.1 

current_key == "a"
Active Unit_Cell is moved along 'a' basis vector by length of norm(a)

current_key == "A"
Active Unit_Cell is moved opposite 'a' basis vector by length of norm(a)

current_key == "b"
Active Unit_Cell is moved along 'b' basis vector by length of norm(b)

current_key == "B" 
Active Unit_Cell is moved opposite 'b' basis vector by length of norm(b)

current_key == "c"
Active Unit_Cell is moved along 'c' basis vector by length of norm(c)

current_key == "C"
Active Unit_Cell is moved opposite 'c' basis vector by length of norm(c)

current_key == "x"
Active Unit_Cell is moved in the 'x' direction by the amount contained in variable 'move_xyz' defined in the open_keypress.cpp file.  

current_key == "X"
Active Unit_Cell is moved in the '-x' direction by the amount contained in variable 'move_xyz' defined in the open_keypress.cpp file.  

current_key == "y"
Active Unit_Cell is moved in the 'y' direction by the amount contained in variable 'move_xyz' defined in the open_keypress.cpp file.  

current_key == "Y"
Active Unit_Cell is moved in the '-y' direction by the amount contained in variable 'move_xyz' defined in the open_keypress.cpp file.

current_key == "z"
Active Unit_Cell is moved in the 'z' direction by the amount contained in variable 'move_xyz' defined in the open_keypress.cpp file.  

current_key == "Z"
Active Unit_Cell is moved in the '-z' direction by the amount contained in variable 'move_xyz' defined in the open_keypress.cpp file.


current_key == "j"
Active Unit_Cell is moved in the direction (by 'move_xyz' distance defined in the open_keypress.cpp file.) parallel to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis vector 'a'. If no basis vectors are defined, the Unit_Cell is moved in the 'x' direction. 

current_key == "k"
Active Unit_Cell is moved in the direction (by 'move_xyz' distance defined in the open_keypress.cpp file.) parallel to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis vector '-a'. If no basis vectors are defined, the Unit_Cell is moved in the '-x' direction.

current_key == "l"
Active Unit_Cell is moved in the direction (by 'move_xyz' distance defined in the open_keypress.cpp file.) parallel 
to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis vector 'b'. If no basis vectors are defined, the Unit_Cell is moved in the 'y' direction.

current_key == ":"
Active Unit_Cell is moved in the direction (by 'move_xyz' distance defined in the open_keypress.cpp file.) parallel to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis vector '-b'. If no basis vectors are defined, the Unit_Cell is moved in the '-y' direction.

current_key == "n"
Active Unit_Cell is moved in the direction (by 'move_xyz' distance defined in the open_keypress.cpp file.) perpendicular to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis vector 'c'. If no basis vectors are defined, the Unit_Cell is moved in the 'z' direction.

current_key == "m"
Active Unit_Cell is moved in the direction (by 'move_xyz' distance defined in the open_keypress.cpp file.) perpendicular to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis vector '-c'. If no basis vectors are defined, the Unit_Cell is moved in the '-z' direction.

current_key == "e"
A single selected atom in an active Unit_Cell is moved in the direction (by 0.1*move_xyz distance defined in the open_keypress.cpp file.) parallel to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis
vector 'a'. If no basis vectors are defined, the Unit_Cell is moved in the 'x' direction.

current_key == "r"
A single selected atom in an active Unit_Cell is moved in the direction (by 0.1*move_xyz distance defined in the open_keypress.cpp file.) parallel to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis
vector '-a'. If no basis vectors are defined, the Unit_Cell is moved in the '-x' direction.

current_key == "g"
A single selected atom in an active Unit_Cell is moved in the direction (by 0.1*move_xyz distance defined in the open_keypress.cpp file.) parallel to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis
vector 'b'. If no basis vectors are defined, the Unit_Cell is moved in the 'y' direction.

current_key == "h"
A single selected atom in an active Unit_Cell is moved in the direction (by 0.1*move_xyz distance defined in the open_keypress.cpp file.) parallel to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis
vector 'b'. If no basis vectors are defined, the Unit_Cell is moved in the '-y' direction.

current_key == ","
A single selected atom in an active Unit_Cell is moved in the direction (by 0.1*move_xyz distance defined in the open_keypress.cpp file.) perpendicular to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis
vector 'c'. If no basis vectors are defined, the Unit_Cell is moved in the 'z' direction.

current_key == "."
A single selected atom in an active Unit_Cell is moved in the direction (by 0.1*move_xyz distance defined in the open_keypress.cpp file.) perpendicular to the active defined plane in the selected Unit_Cell. If no plane exists, the Active unit cell is moved with respect the basis
vector 'c'. If no basis vectors are defined, the Unit_Cell is moved in the '-z' direction.

current_key == "1"
The active Unit_Cell is rotated by 'angle = 0.3' around one of the vectors parallel to the selected plane. If no selected plane exists, the rotation is accomplished about the basis vector 'a'. If the basis vectors are not defined the rotation proceeds about 'x'. 

current_key == "2"
The active Unit_Cell is rotated by 'angle = -0.3' around one of the vectors parallel to the selected plane. If no selected plane exists, the rotation is accomplished about the basis vector 'a'. If the basis vectors are not defined the rotation proceeds about 'x'. 

current_key == "3"
The active Unit_Cell is rotated by 'angle = 0.3' around one of the vectors parallel to the selected plane. If no selected plane exists, the rotation is accomplished about the basis vector 'b'. If the basis vectors are not defined the rotation proceeds about 'y'. 

current_key == "4"
The active Unit_Cell is rotated by 'angle = -0.3' around one of the vectors parallel to the selected plane. If no selected plane exists, the rotation is accomplished about the basis vector 'b'. If the basis vectors are not defined the rotation proceeds about 'y'. 

current_key == "5"
The active Unit_Cell is rotated by 'angle = 0.3' around one of the vectors parallel to the selected plane. If no selected plane exists, the rotation is accomplished about the basis vector 'c'. If the basis vectors are not defined the rotation proceeds about 'z'. 

current_key == "6"
The active Unit_Cell is rotated by 'angle = -0.3' around one of the vector perpendicular to the selected plane. If no selected plane exists, the rotation is accomplished about the basis vector 'c'. If the basis vectors are not defined the rotation proceeds about 'z'. 

current_key == "f"
Toggles the boundary for the active Unit_Cell

current_key == "p"
If three non-collinear atoms are selected, a plane is created on the active Unit_Cell

current_key == "["
The Unit_Cell is rotated such that the plane is located in the x-y axis, perpendicular vector pointing in the z direction;

current_key == "]"
The Unit_Cell is rotated such that the plane is located in the x-y axis, perpendicular vector pointing in the -z direction;

current_key == "("
All the atoms above the plane are deleted, pressing this key the second time, the atoms appear again. 

current_key == ")"
All the atoms below the plane are deleted, pressing this key the second time, the atoms appear again. 

current_key == "t"
The active plane in the selected (active) Unit_Cell is switched. If only one plane exists, nothing happens. 

current_key == "\t"
This is the TAB key. Toggles which one is the active Unit_Cell. 

current_key == "d"
Deletes the active plane in the active Unit_Cell

current_key == "8"
Clones the active Unit_Cell. The cloned cell is positioned at exactly the same location. Moving the active cell will reveal the cloned cell. 

current_key == 127    This is the 'delete' key on the keyboard. 
It deletes the selected atoms in the active Unit_Cell. 

current_key == "\"
Undo command. 

current_key == "U"
make all atoms visible in an active Unit Cell. 

current_key == "u"
unselect all atoms in an active Unit_Cell

current_key == "D"
Deletes an active Unit_Cell

current_key == "8"
Clones the active Unit_Cell. 

current_key == TAB
Switches between Unit_Cells

current_key == "/"
Two unit cells are pushed together along their selected planes. If more then two unit cells exist, only 
the first two cells in the cell array are moved.

current_key == "="
The polygons around cobalt are turned on and off. 



LINEEDIT COMMANDS:
Those are the commands entered into LineEdit widget. Do not include "<" or ">". The full list of commands is given in "line_keypress.cpp". 

line_command == save <name of the file> 
Saves the given file under the name <name of the file.txt>. Give relative path from the folder the executable is stored in. 

line_command == open <name of the file>
Opens the file. Deletes the previous file that was opened. Give relative path, from the folder the executable is stored in. 

line_command == import <name of the file>
Imports the file. The previous file remains opened, two files are now merged. Give relative path, from the folder the executable is stored in. 

line_command == invert
The color of the atoms in an active Unit_Cell is inverted. 

line_command == !<bash line commands>
Putting "!" before any string allows the user to enter into bash shell. 

line_command == align
If two atoms are selected in an active unit cell, aligns this Unit_Cell in such a way that the vector from atom 1 to atom 2 points vertically.  

line_command == makeBonds(string type1, string type2, double bond_length, bool outside)
makeBonds creates bonds between atoms, checks for bonds outside the Unit_Cell if any exist they are created and atoms are added to the Unit_Cell. This method can increase the total number of atoms, watch out for this effect.
	@param type1 the atom from which bonds go
	@param type2 the atom to which bonds go
	@param bond_length maximal bond length
	@param outside specifies whether the method should look to make bonds outside.

line_command == makeBonds(string type1, string type2, double bond_length)
makeBonds creates bonds between atoms, checks for bonds outside the Unit_Cell if any exist they are created and atoms are added to the Unit_Cell. This method can increase the total number of atoms, watch out for this effect. All bonds are assumed to exist inside the cell. 
	@param type1 the atom from which bonds go
	@param type2 the atom to which bonds go
	@param bond_length maximal bond length

line_command == eraseBonds()
setAtomColor erases bonds in the current selected Unit_Cell

line_command == setColor(string input, double red, double green, double blue)
setColor sets the color for a group of atoms on the same type in the active Unit_Cell. 
	@param input type of atom, located in atom.type, for example "He". 
	@param red a float from 0 to 1. 
	@param blue a float from 0 to 1. 
	@param green a float from 0 to 1. 

line_command == setAtomColor(int atom_number, double red, double blue, double green)
setAtomColor sets the color for a given atom specified by 'atom_number' parameter in the active Unit_Cell. 
	@param atom_number number of the specified atom in the Unit_Cell, can be discovered by clicking on the atom with the mouse. 
	@param red a float from 0 to 1. 
	@param blue a float from 0 to 1. 
	@param green a float from 0 to 1. 

line_command == visibleBonds(bool visible)
sets the bonds visible or invisible
	@param bonds either true or false, become visible or invisible





